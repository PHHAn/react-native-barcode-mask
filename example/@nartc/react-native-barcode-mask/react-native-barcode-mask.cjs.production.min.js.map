{"version":3,"file":"react-native-barcode-mask.cjs.production.min.js","sources":["../../../src/BarcodeMask.tsx","../../../src/hocs/withOuterLayout.tsx","../../../src/hooks/useBarcodeFinder.ts","../../../src/hooks/useInternalBarcodeRead.ts","../../../src/index.ts","../../../src/hooks/useBarcodeReadAndroid.ts","../../../src/hooks/useBarcodeReadIOS.ts","../../../src/hooks/useCustomBarcodeReadAndroid.ts","../../../src/hooks/useCustomBarcodeReadIOS.ts"],"sourcesContent":["import React, { FC, memo } from 'react';\nimport { LayoutChangeEvent, StyleSheet, View, ViewStyle } from 'react-native';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport { WithOuterLayoutProps } from './interfaces';\n\nconst { Value, Clock, block, cond, set, startClock, timing, eq } = Animated;\n\ntype DimensionUnit = string | number;\ntype EdgePosition = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';\n\n/**\n *\n */\nexport type RunTimingFn = (\n  clock: Animated.Clock,\n  value: number,\n  destination: number,\n  duration: number\n) => Animated.Node<number>;\n\nexport type OnLayoutChangeHandler = (event: LayoutChangeEvent) => void;\n\n/**\n * @name BarcodeMaskProps\n * @description Props of BarcodeMask component\n */\nexport interface BarcodeMaskProps extends WithOuterLayoutProps {\n  /**\n   * @name width\n   * @type DimensionUnit\n   * @description Width of the Barcode Finder Area\n   * @default 280\n   */\n  width?: DimensionUnit;\n  /**\n   * @name height\n   * @type DimensionUnit\n   * @description Height of the Barcode Finder Area\n   * @default 230\n   */\n  height?: DimensionUnit;\n  /**\n   * @name edgeWidth\n   * @type number\n   * @description Width of corner edges\n   * @default 20\n   */\n  edgeWidth?: number;\n  /**\n   * @name edgeHeight\n   * @type number\n   * @description Height of corner edges\n   * @default 20\n   */\n  edgeHeight?: DimensionUnit;\n  /**\n   * @name edgeColor\n   * @type string\n   * @description Color of corner edges\n   * @default #fff\n   */\n  edgeColor?: string;\n  /**\n   * @name edgeRadius\n   * @type number\n   * @description Border Radius of corner edges\n   * @default 0\n   */\n  edgeRadius?: number;\n  /**\n   * @name edgeBorderWidth\n   * @type DimensionUnit\n   * @description Thickness of corner edges\n   * @default 4\n   */\n  edgeBorderWidth?: DimensionUnit;\n  /**\n   * @name backgroundColor\n   * @type string\n   * @description Background color of Outer Finder Area\n   * @default #eee\n   */\n  backgroundColor?: string;\n  /**\n   * @name maskOpacity\n   * @type number\n   * @description Opacity of Outer Finder Area\n   * @default 1\n   */\n  maskOpacity?: number;\n  /**\n   * @name showAnimatedLine\n   * @type boolean\n   * @description Whether to show Animated Line\n   * @default true\n   */\n  showAnimatedLine?: boolean;\n  /**\n   * @name startValue\n   * @type number\n   * @description Start value of Animated Line (only applicable if `showAnimatedLine` is set to `true`)\n   * @default 0\n   */\n  startValue?: number;\n  /**\n   * @name destinationValue\n   * @type number\n   * @description Destination value of Animated Line (depends on`animatedLineOrientation`)\n   * @default Computed by the length of the respective orientation minus the `animatedLineThickness`\n   */\n  destinationValue?: number;\n  /**\n   * @name animatedLineThickness\n   * @type number\n   * @description Thickness of Animated Line\n   * @default 2\n   */\n  animatedLineThickness?: number;\n  /**\n   * @name animatedLineOrientation\n   * @type 'vertical' | 'horizontal'\n   * @description Orientation that the Animated Line will be drawn\n   * @default 'horizontal'\n   */\n  animatedLineOrientation?: 'vertical' | 'horizontal';\n  /**\n   * @name animatedLineColor\n   * @type string\n   * @description Color of Animated Line\n   * @default #fff\n   */\n  animatedLineColor?: string;\n  /**\n   * @name animationDuration\n   * @type number\n   * @description Duration of Animated Line animation (in ms)\n   * @default 2000\n   */\n  animationDuration?: number;\n  /**\n   * @name runTimingFn\n   * @type RunTimingFn\n   * @description Function to trigger the animation\n   * @default internal `runTiming` function\n   */\n  runTimingFn?: RunTimingFn;\n  /**\n   * @name onLayoutChange\n   * @type OnLayoutChangeHandler\n   * @description Handler to handle LayoutChange. Useful if you want to only detect barcode inside the Finder Area.\n   *   This will be provided from a custom hook that this library also provides.\n   * @default noop\n   */\n  onLayoutChange?: OnLayoutChangeHandler;\n}\n\nconst runTiming: RunTimingFn = (\n  clock: Animated.Clock,\n  value: number,\n  destination: number,\n  duration: number\n) => {\n  const timingState: Animated.TimingState = {\n    finished: new Value(0),\n    position: new Value(value),\n    time: new Value(0),\n    frameTime: new Value(0),\n  };\n\n  const timingConfig: Animated.TimingConfig = {\n    duration,\n    toValue: new Value(destination),\n    easing: Easing.inOut(Easing.ease),\n  };\n\n  return block([\n    startClock(clock),\n    timing(clock, timingState, timingConfig),\n    cond(timingState.finished, [\n      set(timingState.finished, 0),\n      set(timingState.time, 0),\n      set(timingState.frameTime, 0),\n      set(\n        timingState.position,\n        cond(eq(timingState.position, destination), destination, value)\n      ),\n      set(\n        timingConfig.toValue as Animated.Value<number>,\n        cond(eq(timingState.position, destination), value, destination)\n      ),\n    ]),\n    timingState.position,\n  ]);\n};\n\nconst noop = () => {};\n\nexport const BarcodeMask: FC<BarcodeMaskProps> = memo(\n  ({\n    width,\n    height,\n    startValue,\n    destinationValue,\n    backgroundColor,\n    edgeBorderWidth,\n    edgeColor,\n    edgeHeight,\n    edgeWidth,\n    edgeRadius,\n    maskOpacity,\n    animatedLineColor,\n    animatedLineOrientation,\n    animatedLineThickness,\n    animationDuration,\n    showAnimatedLine,\n    runTimingFn,\n    onLayoutChange,\n    outerBoundingRect,\n    onOuterLayout,\n  }) => {\n    const _animatedLineDimension = (\n      dimension: DimensionUnit | undefined,\n      outerDimension: 'width' | 'height'\n    ) => {\n      const outer = outerBoundingRect?.[outerDimension] ?? 0;\n\n      if (dimension) {\n        if (typeof dimension === 'number') {\n          return dimension * 0.9;\n        }\n\n        return dimension.endsWith('%')\n          ? (Number(dimension.split('%')[0]) / 100) * outer * 0.9\n          : Number(dimension.split(/\\d+/)[0]) * outer * 0.9;\n      }\n\n      return outer * 0.9;\n    };\n\n    const _animatedValue = (\n      dimension: DimensionUnit | undefined,\n      outerDimension: 'width' | 'height'\n    ) => {\n      const calculatedDimension = _animatedLineDimension(\n        dimension,\n        outerDimension\n      );\n      const fullDimension = calculatedDimension / 0.9;\n\n      return fullDimension - (animatedLineThickness as number);\n    };\n\n    const _animatedLineStyle = () => {\n      if (animatedLineOrientation === 'horizontal') {\n        const _width = _animatedLineDimension(width, 'width');\n        const destination = _animatedValue(height, 'height');\n        return {\n          ...styles.animatedLine,\n          height: animatedLineThickness,\n          width: _width,\n          backgroundColor: animatedLineColor,\n          top: runTimingFn!(\n            new Clock(),\n            startValue || 0,\n            destinationValue || destination,\n            animationDuration as number\n          ),\n        };\n      }\n\n      const _height = _animatedLineDimension(height, 'height');\n      const destination = _animatedValue(width, 'width');\n      return {\n        ...styles.animatedLine,\n        width: animatedLineThickness,\n        height: _height,\n        backgroundColor: animatedLineColor,\n        left: runTimingFn!(\n          new Clock(),\n          startValue || 0,\n          destinationValue || destination,\n          animationDuration as number\n        ),\n      };\n    };\n\n    const _applyMaskFrameStyle = () => {\n      return { backgroundColor, opacity: maskOpacity, flex: 1 };\n    };\n\n    const _renderEdge = (edgePosition: EdgePosition) => {\n      const defaultStyle = {\n        width: edgeWidth,\n        height: edgeHeight,\n        borderColor: edgeColor,\n        zIndex: 2,\n      };\n\n      const borderWidth = edgeBorderWidth as number;\n      const borderRadius = edgeRadius as number;\n\n      const edgeBorderStyle: {\n        [position in typeof edgePosition]: ViewStyle;\n      } = {\n        topRight: {\n          borderRightWidth: borderWidth,\n          borderTopWidth: borderWidth,\n          borderTopRightRadius: borderRadius,\n          top: -borderWidth,\n          right: -borderWidth,\n        },\n        topLeft: {\n          borderTopWidth: borderWidth,\n          borderLeftWidth: borderWidth,\n          borderTopLeftRadius: borderRadius,\n          top: -borderWidth,\n          left: -borderWidth,\n        },\n        bottomRight: {\n          borderBottomWidth: borderWidth,\n          borderRightWidth: borderWidth,\n          borderBottomRightRadius: borderRadius,\n          bottom: -borderWidth,\n          right: -borderWidth,\n        },\n        bottomLeft: {\n          borderBottomWidth: borderWidth,\n          borderLeftWidth: borderWidth,\n          borderBottomLeftRadius: borderRadius,\n          bottom: -borderWidth,\n          left: -borderWidth,\n        },\n      };\n\n      return (\n        <View\n          style={{\n            ...defaultStyle,\n            ...styles[edgePosition],\n            ...edgeBorderStyle[edgePosition],\n          }}\n        />\n      );\n    };\n\n    const _width = _animatedLineDimension(width, 'width') / 0.9;\n    const _height = _animatedLineDimension(height, 'height') / 0.9;\n\n    return (\n      <View style={styles.container}>\n        <View\n          style={{ ...styles.finder, width: _width, height: _height }}\n          onLayout={onLayoutChange || noop}\n        >\n          {_renderEdge('topLeft')}\n          {_renderEdge('topRight')}\n          {_renderEdge('bottomLeft')}\n          {_renderEdge('bottomRight')}\n          {showAnimatedLine && <Animated.View style={_animatedLineStyle()} />}\n        </View>\n        <View style={styles.maskOuter} onLayout={onOuterLayout || noop}>\n          <View style={{ ...styles.maskRow, ..._applyMaskFrameStyle() }} />\n          <View style={{ height, ...styles.maskCenter }}>\n            <View style={_applyMaskFrameStyle()} />\n            <View\n              style={{\n                ...styles.maskInner,\n                width,\n                height,\n                borderRadius: edgeRadius,\n              }}\n            />\n            <View style={_applyMaskFrameStyle()} />\n          </View>\n          <View style={{ ...styles.maskRow, ..._applyMaskFrameStyle() }} />\n        </View>\n      </View>\n    );\n  }\n);\n\nBarcodeMask.defaultProps = {\n  width: 280,\n  height: 230,\n  edgeWidth: 20,\n  edgeHeight: 20,\n  edgeColor: '#fff',\n  edgeBorderWidth: 4,\n  edgeRadius: 0,\n  backgroundColor: '#eee',\n  maskOpacity: 1,\n  animatedLineColor: '#fff',\n  animatedLineOrientation: 'horizontal',\n  animatedLineThickness: 2,\n  animationDuration: 2000,\n  runTimingFn: runTiming,\n  showAnimatedLine: true,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    ...StyleSheet.absoluteFillObject,\n  },\n  finder: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    zIndex: 1,\n  },\n  maskOuter: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'space-around',\n  },\n  maskInner: {\n    backgroundColor: 'transparent',\n  },\n  maskRow: {\n    width: '100%',\n  },\n  maskCenter: {\n    flexDirection: 'row',\n    display: 'flex',\n  },\n  topLeft: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n  },\n  topRight: {\n    position: 'absolute',\n    top: 0,\n    right: 0,\n  },\n  bottomLeft: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n  },\n  bottomRight: {\n    position: 'absolute',\n    bottom: 0,\n    right: 0,\n  },\n  animatedLine: {\n    position: 'absolute',\n    zIndex: 1,\n  },\n});\n","import React, { ComponentType, PureComponent } from 'react';\nimport { LayoutChangeEvent } from 'react-native';\nimport { BoundingRect, Optionalize, WithOuterLayoutProps } from '../interfaces';\n\nexport interface WithOuterLayoutHocState {\n  boundingRect: BoundingRect;\n}\n\nexport const withOuterLayout = <\n  T extends WithOuterLayoutProps = WithOuterLayoutProps\n>(\n  WrappedComponent: ComponentType<T>\n) => {\n  const displayName =\n    WrappedComponent.displayName || WrappedComponent.name || 'Component';\n\n  return class ComponentWithOuterLayout extends PureComponent<\n    Optionalize<T, WithOuterLayoutProps>,\n    WithOuterLayoutHocState\n  > {\n    public static displayName = `withOuterLayout${displayName}`;\n\n    state: WithOuterLayoutHocState = {\n      boundingRect: { x: 0, y: 0, width: 0, height: 0 },\n    };\n\n    onOuterLayout = (event: LayoutChangeEvent): void => {\n      const {\n        nativeEvent: { layout },\n      } = event;\n      this.setState({ boundingRect: layout });\n    };\n\n    render() {\n      return (\n        <WrappedComponent\n          outerBoundingRect={this.state.boundingRect}\n          onOuterLayout={this.onOuterLayout}\n          {...(this.props as T)}\n        />\n      );\n    }\n  };\n};\n","import { Reducer, useCallback, useReducer, useState } from 'react';\nimport { LayoutChangeEvent } from 'react-native';\nimport { BoundingRect, CustomBarcodeRead } from '../interfaces';\n\n/**\n * @internal\n * @param dataProcessor\n * @param onScannedData\n * @param customBarcodeRead\n */\nexport default (\n  dataProcessor: (data: string) => string,\n  onScannedData: (processed: string) => void,\n  customBarcodeRead?: CustomBarcodeRead | number\n) => {\n  const [barcodeRead, setBarcodeRead] = useState(false);\n  const [state, dispatch] = useReducer<\n    Reducer<\n      BoundingRect,\n      {\n        type: 'SET';\n        payload: BoundingRect;\n      }\n    >\n  >(\n    (prev, action) => {\n      switch (action.type) {\n        case 'SET': {\n          return { ...prev, ...action.payload };\n        }\n        default: {\n          return prev;\n        }\n      }\n    },\n    {\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    }\n  );\n  const _onBarcodeFinderLayoutChange = useCallback(\n    (event: LayoutChangeEvent) => {\n      const {\n        nativeEvent: {\n          layout: { height, width, x, y },\n        },\n      } = event;\n      dispatch({ type: 'SET', payload: { height, width, x, y } });\n    },\n    [state.height, state.width, state.x, state.y]\n  );\n\n  let timeoutId = 0;\n  let processingReadBarcode: (data: string) => void;\n\n  if (\n    !customBarcodeRead ||\n    (customBarcodeRead && typeof customBarcodeRead === 'number')\n  ) {\n    timeoutId && clearTimeout(timeoutId);\n    processingReadBarcode = data => {\n      setBarcodeRead(true);\n      onScannedData(dataProcessor(data));\n      timeoutId = setTimeout(() => {\n        setBarcodeRead(false);\n      }, customBarcodeRead);\n    };\n  } else {\n    processingReadBarcode = data => {\n      (customBarcodeRead as CustomBarcodeRead)?.beforeScan?.();\n      onScannedData(dataProcessor(data));\n      (customBarcodeRead as CustomBarcodeRead)?.afterScan?.();\n    };\n  }\n\n  return {\n    barcodeRead:\n      customBarcodeRead && typeof customBarcodeRead === 'object'\n        ? null\n        : barcodeRead,\n    finderX: state.x,\n    finderY: state.y,\n    finderWidth: state.width,\n    finderHeight: state.height,\n    onBarcodeFinderLayoutChange: _onBarcodeFinderLayoutChange,\n    processingReadBarcode,\n  };\n};\n","import { useCallback } from 'react';\nimport { PixelRatio, Platform } from 'react-native';\nimport { BarCodeType, Point, RNCamera, Size } from 'react-native-camera';\n\nconst useInternalBarcodeReadIOS = (\n  barcodeRead: boolean,\n  isFocused: boolean,\n  finderX: number,\n  finderY: number,\n  finderWidth: number,\n  finderHeight: number,\n  processingReadBarcode: (data: string) => void\n) =>\n  useCallback(\n    (event: {\n      data: string;\n      bounds:\n        | { width: number; height: number; origin: Array<Point<string>> }\n        | { origin: Point<string>; size: Size<string> };\n      type: keyof BarCodeType;\n    }) => {\n      if (!isFocused || barcodeRead) {\n        return;\n      }\n\n      const {\n        origin: { x, y },\n        size: { width, height },\n      } = event.bounds as { origin: Point<string>; size: Size<string> };\n\n      if (\n        Number(x) >= finderX &&\n        Number(x) + Number(width) <= finderX + finderWidth &&\n        Number(y) >= finderY &&\n        Number(y) + Number(height) <= finderY + finderHeight\n      ) {\n        return processingReadBarcode(event.data);\n      }\n    },\n    [\n      barcodeRead,\n      isFocused,\n      finderX,\n      finderY,\n      finderWidth,\n      finderHeight,\n      processingReadBarcode,\n    ]\n  );\n\nconst useInternalBarcodeReadAndroid = (\n  barcodeRead: boolean,\n  isFocused: boolean,\n  finderX: number,\n  finderY: number,\n  finderWidth: number,\n  finderHeight: number,\n  processingReadBarcode: (data: string) => void\n) =>\n  useCallback(\n    (event: {\n      data: string;\n      bounds:\n        | { width: number; height: number; origin: Array<Point<string>> }\n        | { origin: Point<string>; size: Size<string> };\n      type: keyof BarCodeType;\n    }) => {\n      if (!isFocused || barcodeRead) {\n        return;\n      }\n\n      const _bounds = event.bounds as {\n        width: number;\n        height: number;\n        origin: Point<string>[];\n      };\n      const _pointBounds = _bounds.origin.map(point => ({\n        x: Number(point.x) / PixelRatio.get(),\n        y: Number(point.y) / PixelRatio.get(),\n      }));\n\n      const _insideBox = (point: { x: number; y: number }) => {\n        const { x, y } = point;\n        return (\n          x >= finderX &&\n          x <= finderX + finderWidth &&\n          y >= finderY &&\n          y <= finderY + finderHeight\n        );\n      };\n\n      /**\n       *  0 --------------- 2\n       *  |  PDF417         |\n       *  | /////////////// |\n       *  1 --------------- 3\n       */\n      if (event.type === RNCamera.Constants.BarCodeType.pdf417) {\n        const [topLeft, bottomLeft, topRight, bottomRight] = _pointBounds;\n        if (\n          _insideBox(topLeft) &&\n          _insideBox(bottomLeft) &&\n          _insideBox(topRight) &&\n          _insideBox(bottomRight)\n        ) {\n          processingReadBarcode(event.data);\n          return;\n        }\n      }\n\n      /**\n       *  2 ------ 3\n       *  |\n       *  | QR Code\n       *  |\n       *  1 ------ 0\n       */\n      if (event.type === RNCamera.Constants.BarCodeType.qr) {\n        const [bottomRight, bottomLeft, topLeft, topRight] = _pointBounds;\n        if (\n          _insideBox(bottomRight) &&\n          _insideBox(bottomLeft) &&\n          _insideBox(topLeft) &&\n          _insideBox(topRight)\n        ) {\n          processingReadBarcode(event.data);\n          return;\n        }\n      }\n    },\n    [\n      barcodeRead,\n      isFocused,\n      finderX,\n      finderY,\n      finderWidth,\n      finderHeight,\n      processingReadBarcode,\n    ]\n  );\n\nexport default Platform.select({\n  android: useInternalBarcodeReadAndroid,\n  ios: useInternalBarcodeReadIOS,\n}) as typeof useInternalBarcodeReadAndroid;\n","import { Platform } from 'react-native';\nimport { BarcodeMask } from './BarcodeMask';\nimport { withOuterLayout } from './hocs';\nimport {\n  useBarcodeReadAndroid,\n  useBarcodeReadIOS,\n  useCustomBarcodeReadAndroid,\n  useCustomBarcodeReadIOS,\n} from './hooks';\nimport {\n  BoundingRect,\n  CustomBarcodeRead,\n  CustomBarcodeReadCallback,\n  WithOuterLayoutProps,\n} from './interfaces';\n\nconst useBarcodeRead = Platform.select({\n  android: useBarcodeReadAndroid,\n  ios: useBarcodeReadIOS,\n}) as typeof useBarcodeReadIOS;\n\nconst useCustomBarcodeRead = Platform.select({\n  android: useCustomBarcodeReadAndroid,\n  ios: useCustomBarcodeReadIOS,\n}) as typeof useCustomBarcodeReadIOS;\n\nconst BarcodeMaskWithOuterLayout = withOuterLayout(BarcodeMask);\n\nexport {\n  BarcodeMask,\n  BarcodeMaskWithOuterLayout,\n  useBarcodeRead,\n  useCustomBarcodeRead,\n  CustomBarcodeRead,\n  CustomBarcodeReadCallback,\n  BoundingRect,\n  WithOuterLayoutProps,\n  withOuterLayout,\n};\n","import useBarcodeFinder from './useBarcodeFinder';\nimport useInternalBarcodeRead from './useInternalBarcodeRead';\n\nexport default (\n  isFocused: boolean,\n  dataProcessor: (data: string) => string,\n  onScannedData: (processed: string) => void,\n  barcodeReadDelay: number = 500\n) => {\n  const {\n    barcodeRead,\n    onBarcodeFinderLayoutChange,\n    finderY,\n    finderX,\n    finderWidth,\n    finderHeight,\n    processingReadBarcode,\n  } = useBarcodeFinder(dataProcessor, onScannedData, barcodeReadDelay);\n\n  const onBarcodeRead = useInternalBarcodeRead(\n    barcodeRead != null ? barcodeRead : false,\n    isFocused,\n    finderX,\n    finderY,\n    finderWidth,\n    finderHeight,\n    processingReadBarcode\n  );\n\n  return {\n    barcodeRead,\n    onBarcodeRead,\n    onBarcodeFinderLayoutChange,\n  };\n};\n","import useBarcodeFinder from './useBarcodeFinder';\nimport useInternalBarcodeRead from './useInternalBarcodeRead';\n\nexport default (\n  isFocused: boolean,\n  dataProcessor: (data: string) => string,\n  onScannedData: (processed: string) => void,\n  barcodeReadDelay: number = 500\n) => {\n  const {\n    barcodeRead,\n    onBarcodeFinderLayoutChange,\n    finderY,\n    finderX,\n    finderWidth,\n    finderHeight,\n    processingReadBarcode,\n  } = useBarcodeFinder(dataProcessor, onScannedData, barcodeReadDelay);\n\n  const onBarcodeRead = useInternalBarcodeRead(\n    barcodeRead != null ? barcodeRead : false,\n    isFocused,\n    finderX,\n    finderY,\n    finderWidth,\n    finderHeight,\n    processingReadBarcode\n  );\n\n  return {\n    barcodeRead,\n    onBarcodeRead,\n    onBarcodeFinderLayoutChange,\n  };\n};\n","import { CustomBarcodeRead, CustomBarcodeReadCallback } from '../interfaces';\nimport useBarcodeFinder from './useBarcodeFinder';\nimport useInternalBarcodeRead from './useInternalBarcodeRead';\n\nexport default (\n  isFocused: boolean,\n  dataProcessor: (data: string) => string,\n  onScannedData: (processed: string) => void,\n  customBarcodeRead: CustomBarcodeRead,\n  customBarcodeReadCallback: CustomBarcodeReadCallback\n) => {\n  const {\n    barcodeRead,\n    onBarcodeFinderLayoutChange,\n    finderY,\n    finderX,\n    finderWidth,\n    finderHeight,\n    processingReadBarcode,\n  } = useBarcodeFinder(dataProcessor, onScannedData, customBarcodeRead);\n\n  return {\n    barcodeRead,\n    onBarcodeRead: customBarcodeReadCallback\n      ? customBarcodeReadCallback(\n          {\n            x: finderX,\n            y: finderY,\n            width: finderWidth,\n            height: finderHeight,\n          },\n          processingReadBarcode\n        )\n      : useInternalBarcodeRead(\n          barcodeRead != null ? barcodeRead : false,\n          isFocused,\n          finderX,\n          finderY,\n          finderWidth,\n          finderHeight,\n          processingReadBarcode\n        ),\n    onBarcodeFinderLayoutChange,\n  };\n};\n","import { CustomBarcodeRead, CustomBarcodeReadCallback } from 'interfaces';\nimport useBarcodeFinder from './useBarcodeFinder';\nimport useInternalBarcodeRead from './useInternalBarcodeRead';\n\nexport default (\n  isFocused: boolean,\n  dataProcessor: (data: string) => string,\n  onScannedData: (processed: string) => void,\n  customBarcodeRead: CustomBarcodeRead,\n  customBarcodeReadCallback: CustomBarcodeReadCallback\n) => {\n  const {\n    barcodeRead,\n    onBarcodeFinderLayoutChange,\n    finderHeight,\n    finderWidth,\n    finderX,\n    finderY,\n    processingReadBarcode,\n  } = useBarcodeFinder(dataProcessor, onScannedData, customBarcodeRead);\n\n  return {\n    barcodeRead,\n    onBarcodeRead: customBarcodeReadCallback\n      ? customBarcodeReadCallback(\n          {\n            x: finderX,\n            y: finderY,\n            width: finderWidth,\n            height: finderHeight,\n          },\n          processingReadBarcode\n        )\n      : useInternalBarcodeRead(\n          barcodeRead != null ? barcodeRead : false,\n          isFocused,\n          finderX,\n          finderY,\n          finderWidth,\n          finderHeight,\n          processingReadBarcode\n        ),\n    onBarcodeFinderLayoutChange,\n  };\n};\n"],"names":["Value","Animated","Clock","block","cond","set","startClock","timing","eq","noop","BarcodeMask","memo","width","height","startValue","destinationValue","backgroundColor","edgeBorderWidth","edgeColor","edgeHeight","edgeWidth","edgeRadius","maskOpacity","animatedLineColor","animatedLineOrientation","animatedLineThickness","animationDuration","showAnimatedLine","runTimingFn","onLayoutChange","outerBoundingRect","onOuterLayout","_animatedLineDimension","dimension","outerDimension","outer","endsWith","Number","split","_animatedValue","_applyMaskFrameStyle","opacity","flex","_renderEdge","edgePosition","React","View","style","borderColor","zIndex","styles","topRight","borderRightWidth","borderTopWidth","borderTopRightRadius","top","right","topLeft","borderLeftWidth","borderTopLeftRadius","left","bottomRight","borderBottomWidth","borderBottomRightRadius","bottom","bottomLeft","borderBottomLeftRadius","_width","_height","container","finder","onLayout","destination","animatedLine","_animatedLineStyle","maskOuter","maskRow","maskCenter","maskInner","borderRadius","defaultProps","clock","value","duration","timingState","finished","position","time","frameTime","timingConfig","toValue","easing","Easing","inOut","ease","StyleSheet","create","alignItems","justifyContent","absoluteFillObject","flexDirection","display","withOuterLayout","WrappedComponent","displayName","name","boundingRect","x","y","event","setState","nativeEvent","layout","render","this","state","props","PureComponent","dataProcessor","onScannedData","customBarcodeRead","processingReadBarcode","useState","barcodeRead","setBarcodeRead","useReducer","prev","action","type","payload","dispatch","_onBarcodeFinderLayoutChange","useCallback","timeoutId","clearTimeout","data","setTimeout","beforeScan","afterScan","finderX","finderY","finderWidth","finderHeight","onBarcodeFinderLayoutChange","Platform","select","android","isFocused","_pointBounds","bounds","origin","map","point","PixelRatio","get","_insideBox","RNCamera","Constants","BarCodeType","pdf417","qr","ios","size","useBarcodeRead","barcodeReadDelay","useBarcodeFinder","onBarcodeRead","useInternalBarcodeRead","useCustomBarcodeRead","customBarcodeReadCallback","BarcodeMaskWithOuterLayout"],"mappings":"keAKQA,EAA2DC,EAA3DD,MAAOE,EAAoDD,EAApDC,MAAOC,EAA6CF,EAA7CE,MAAOC,EAAsCH,EAAtCG,KAAMC,EAAgCJ,EAAhCI,IAAKC,EAA2BL,EAA3BK,WAAYC,EAAeN,EAAfM,OAAQC,EAAOP,EAAPO,GA8LtDC,EAAO,aAEAC,EAAoCC,QAC/C,gBACEC,IAAAA,MACAC,IAAAA,OACAC,IAAAA,WACAC,IAAAA,iBACAC,IAAAA,gBACAC,IAAAA,gBACAC,IAAAA,UACAC,IAAAA,WACAC,IAAAA,UACAC,IAAAA,WACAC,IAAAA,YACAC,IAAAA,kBACAC,IAAAA,wBACAC,IAAAA,sBACAC,IAAAA,kBACAC,IAAAA,iBACAC,IAAAA,YACAC,IAAAA,eACAC,IAAAA,kBACAC,IAAAA,cAEMC,EAAyB,SAC7BC,EACAC,SAEMC,YAAQL,MAAAA,SAAAA,EAAoBI,kBAAmB,SAEjDD,EACuB,iBAAdA,EACU,GAAZA,EAGFA,EAAUG,SAAS,KACrBC,OAAOJ,EAAUK,MAAM,KAAK,IAAM,IAAOH,EAAQ,GAClDE,OAAOJ,EAAUK,MAAM,OAAO,IAAMH,EAAQ,GAGnC,GAARA,GAGHI,EAAiB,SACrBN,EACAC,UAE4BF,EAC1BC,EACAC,GAE0C,GAEpBT,GAqCpBe,EAAuB,iBACpB,CAAExB,gBAAAA,EAAiByB,QAASnB,EAAaoB,KAAM,IAGlDC,EAAc,SAACC,UA6CjBC,gBAACC,QACCC,WA7CiB,CACnBnC,MAAOQ,EACPP,OAAQM,EACR6B,YAAa9B,EACb+B,OAAQ,MA2CDC,EAAON,MAnCZ,CACFO,SAAU,CACRC,iBAPgBnC,EAQhBoC,eARgBpC,EAShBqC,qBARiBjC,EASjBkC,KAVgBtC,EAWhBuC,OAXgBvC,GAalBwC,QAAS,CACPJ,eAdgBpC,EAehByC,gBAfgBzC,EAgBhB0C,oBAfiBtC,EAgBjBkC,KAjBgBtC,EAkBhB2C,MAlBgB3C,GAoBlB4C,YAAa,CACXC,kBArBgB7C,EAsBhBmC,iBAtBgBnC,EAuBhB8C,wBAtBiB1C,EAuBjB2C,QAxBgB/C,EAyBhBuC,OAzBgBvC,GA2BlBgD,WAAY,CACVH,kBA5BgB7C,EA6BhByC,gBA7BgBzC,EA8BhBiD,uBA7BiB7C,EA8BjB2C,QA/BgB/C,EAgChB2C,MAhCgB3C,IAyCK2B,OAMrBuB,EAASnC,EAAuBpB,EAAO,SAAW,GAClDwD,EAAUpC,EAAuBnB,EAAQ,UAAY,UAGzDgC,gBAACC,QAAKC,MAAOG,EAAOmB,WAClBxB,gBAACC,QACCC,WAAYG,EAAOoB,QAAQ1D,MAAOuD,EAAQtD,OAAQuD,IAClDG,SAAU1C,GAAkBpB,GAE3BkC,EAAY,WACZA,EAAY,YACZA,EAAY,cACZA,EAAY,eACZhB,GAAoBkB,gBAAC5C,EAAS6C,MAAKC,MA1Gf,cACO,eAA5BvB,EAA0C,KACtC2C,EAASnC,EAAuBpB,EAAO,SACvC4D,EAAcjC,EAAe1B,EAAQ,sBAEtCqC,EAAOuB,cACV5D,OAAQY,EACRb,MAAOuD,EACPnD,gBAAiBO,EACjBgC,IAAK3B,EACH,IAAI1B,EACJY,GAAc,EACdC,GAAoByD,EACpB9C,SAKA0C,EAAUpC,EAAuBnB,EAAQ,UACzC2D,EAAcjC,EAAe3B,EAAO,qBAErCsC,EAAOuB,cACV7D,MAAOa,EACPZ,OAAQuD,EACRpD,gBAAiBO,EACjBqC,KAAMhC,EACJ,IAAI1B,EACJY,GAAc,EACdC,GAAoByD,EACpB9C,KA6E2CgD,MAE7C7B,gBAACC,QAAKC,MAAOG,EAAOyB,UAAWJ,SAAUxC,GAAiBtB,GACxDoC,gBAACC,QAAKC,WAAYG,EAAO0B,WAAYpC,OACrCK,gBAACC,QAAKC,SAASlC,OAAAA,GAAWqC,EAAO2B,aAC/BhC,gBAACC,QAAKC,MAAOP,MACbK,gBAACC,QACCC,WACKG,EAAO4B,WACVlE,MAAAA,EACAC,OAAAA,EACAkE,aAAc1D,MAGlBwB,gBAACC,QAAKC,MAAOP,OAEfK,gBAACC,QAAKC,WAAYG,EAAO0B,WAAYpC,YAO/C9B,EAAYsE,aAAe,CACzBpE,MAAO,IACPC,OAAQ,IACRO,UAAW,GACXD,WAAY,GACZD,UAAW,OACXD,gBAAiB,EACjBI,WAAY,EACZL,gBAAiB,OACjBM,YAAa,EACbC,kBAAmB,OACnBC,wBAAyB,aACzBC,sBAAuB,EACvBC,kBAAmB,IACnBE,YA/O6B,SAC7BqD,EACAC,EACAV,EACAW,OAEMC,EAAoC,CACxCC,SAAU,IAAIrF,EAAM,GACpBsF,SAAU,IAAItF,EAAMkF,GACpBK,KAAM,IAAIvF,EAAM,GAChBwF,UAAW,IAAIxF,EAAM,IAGjByF,EAAsC,CAC1CN,SAAAA,EACAO,QAAS,IAAI1F,EAAMwE,GACnBmB,OAAQC,SAAOC,MAAMD,SAAOE,cAGvB3F,EAAM,CACXG,EAAW2E,GACX1E,EAAO0E,EAAOG,EAAaK,GAC3BrF,EAAKgF,EAAYC,SAAU,CACzBhF,EAAI+E,EAAYC,SAAU,GAC1BhF,EAAI+E,EAAYG,KAAM,GACtBlF,EAAI+E,EAAYI,UAAW,GAC3BnF,EACE+E,EAAYE,SACZlF,EAAKI,EAAG4E,EAAYE,SAAUd,GAAcA,EAAaU,IAE3D7E,EACEoF,EAAaC,QACbtF,EAAKI,EAAG4E,EAAYE,SAAUd,GAAcU,EAAOV,MAGvDY,EAAYE,YA6Md3D,kBAAkB,GAGpB,IAAMuB,EAAS6C,aAAWC,OAAO,CAC/B3B,aACE4B,WAAY,SACZC,eAAgB,UACbH,aAAWI,oBAEhB7B,OAAQ,CACN2B,WAAY,SACZC,eAAgB,SAChBjD,OAAQ,GAEV0B,UAAW,CACTW,SAAU,WACV/B,IAAK,EACLK,KAAM,EACNhD,MAAO,OACPC,OAAQ,OACRoF,WAAY,SACZC,eAAgB,gBAElBpB,UAAW,CACT9D,gBAAiB,eAEnB4D,QAAS,CACPhE,MAAO,QAETiE,WAAY,CACVuB,cAAe,MACfC,QAAS,QAEX5C,QAAS,CACP6B,SAAU,WACV/B,IAAK,EACLK,KAAM,GAERT,SAAU,CACRmC,SAAU,WACV/B,IAAK,EACLC,MAAO,GAETS,WAAY,CACVqB,SAAU,WACVtB,OAAQ,EACRJ,KAAM,GAERC,YAAa,CACXyB,SAAU,WACVtB,OAAQ,EACRR,MAAO,GAETiB,aAAc,CACZa,SAAU,WACVrC,OAAQ,KC3bCqD,EAAkB,SAG7BC,SAEMC,EACJD,EAAiBC,aAAeD,EAAiBE,MAAQ,0GAQxB,CAC/BC,aAAc,CAAEC,EAAG,EAAGC,EAAG,EAAGhG,MAAO,EAAGC,OAAQ,oBAGhC,SAACgG,KAIVC,SAAS,CAAEJ,aADZG,EADFE,YAAeC,sHAKnBC,OAAA,kBAEIpE,gBAAC0D,iBACCzE,kBAAmBoF,KAAKC,MAAMT,aAC9B3E,cAAemF,KAAKnF,eACfmF,KAAKE,YAtB4BC,gDAIEb,gBCThDc,EACAC,EACAC,OA0CIC,IAxCkCC,YAAS,GAAxCC,OAAaC,SACMC,cASxB,SAACC,EAAMC,UACGA,EAAOC,UACR,kBACSF,KAASC,EAAOE,wBAGrBH,KAIb,CACElH,MAAO,EACPC,OAAQ,EACR8F,EAAG,EACHC,EAAG,IAvBAO,OAAOe,OA0BRC,EAA+BC,eACnC,SAACvB,SAKKA,EAHFE,YACEC,OAGJkB,EAAS,CAAEF,KAAM,MAAOC,QAAS,CAAEpH,SAHrBA,OAG6BD,QAHrBA,MAG4B+F,IAHrBA,EAGwBC,IAHrBA,OAKlC,CAACO,EAAMtG,OAAQsG,EAAMvG,MAAOuG,EAAMR,EAAGQ,EAAMP,IAGzCyB,EAAY,SAIbb,GACAA,GAAkD,iBAAtBA,GAE7Ba,GAAaC,aAAaD,GAC1BZ,EAAwB,SAAAc,GACtBX,GAAe,GACfL,EAAcD,EAAciB,IAC5BF,EAAYG,YAAW,WACrBZ,GAAe,KACdJ,KAGLC,EAAwB,SAAAc,WACrBf,MAAAA,aAAAA,EAAyCiB,gCAAzCjB,GACDD,EAAcD,EAAciB,IAC3Bf,MAAAA,aAAAA,EAAyCkB,+BAAzClB,IAIE,CACLG,YACEH,GAAkD,iBAAtBA,EACxB,KACAG,EACNgB,QAASxB,EAAMR,EACfiC,QAASzB,EAAMP,EACfiC,YAAa1B,EAAMvG,MACnBkI,aAAc3B,EAAMtG,OACpBkI,4BAA6BZ,EAC7BV,sBAAAA,MCsDWuB,WAASC,OAAO,CAC7BC,QA5FoC,SACpCvB,EACAwB,EACAR,EACAC,EACAC,EACAC,EACArB,UAEAW,eACE,SAACvB,MAOMsC,IAAaxB,OASZyB,EALUvC,EAAMwC,OAKOC,OAAOC,KAAI,SAAAC,SAAU,CAChD7C,EAAGtE,OAAOmH,EAAM7C,GAAK8C,aAAWC,MAChC9C,EAAGvE,OAAOmH,EAAM5C,GAAK6C,aAAWC,UAG5BC,EAAa,SAACH,OACV7C,EAAS6C,EAAT7C,EAAGC,EAAM4C,EAAN5C,SAETD,GAAKgC,GACLhC,GAAKgC,EAAUE,GACfjC,GAAKgC,GACLhC,GAAKgC,EAAUE,MAUfjC,EAAMmB,OAAS4B,WAASC,UAAUC,YAAYC,OAAQ,KACxC9F,EAAqCmF,KAAzBjG,EAAyBiG,KAAfvF,EAAeuF,QAEnDO,EAFmDP,OAGnDO,EAAW1F,IACX0F,EAAWxG,IACXwG,EAAW9F,eAEX4D,EAAsBZ,EAAM0B,SAY5B1B,EAAMmB,OAAS4B,WAASC,UAAUC,YAAYE,GAAI,KAChC/F,EAAiCmF,KAArB3F,EAAqB2F,KAAZjG,EAAYiG,QAEnDO,EAFmDP,OAGnDO,EAAW1F,IACX0F,EAAWlG,IACXkG,EAAWxG,eAEXsE,EAAsBZ,EAAM0B,UAKlC,CACEZ,EACAwB,EACAR,EACAC,EACAC,EACAC,EACArB,KAMJwC,IA3IgC,SAChCtC,EACAwB,EACAR,EACAC,EACAC,EACAC,EACArB,UAEAW,eACE,SAACvB,MAOMsC,IAAaxB,SAOdd,EAAMwC,WAFRC,OAAU3C,IAAAA,EAAGC,IAAAA,MACbsD,KAAQtJ,IAAAA,MAAOC,IAAAA,cAIfwB,OAAOsE,IAAMgC,GACbtG,OAAOsE,GAAKtE,OAAOzB,IAAU+H,EAAUE,GACvCxG,OAAOuE,IAAMgC,GACbvG,OAAOuE,GAAKvE,OAAOxB,IAAW+H,EAAUE,EAEjCrB,EAAsBZ,EAAM0B,gBAGvC,CACEZ,EACAwB,EACAR,EACAC,EACAC,EACAC,EACArB,OC9BA0C,EAAiBnB,WAASC,OAAO,CACrCC,iBCbAC,EACA7B,EACAC,EACA6C,YAAAA,IAAAA,EAA2B,WAUvBC,EAAiB/C,EAAeC,EAAe6C,GAPjDzC,IAAAA,YACAoB,IAAAA,kCAkBK,CACLpB,YAAAA,EACA2C,cAZoBC,EACL,MAAf5C,GAAsBA,EACtBwB,IARAR,UADAC,UAEAC,cACAC,eACArB,uBAgBAsB,4BAAAA,IDdFkB,aEdAd,EACA7B,EACAC,EACA6C,YAAAA,IAAAA,EAA2B,WAUvBC,EAAiB/C,EAAeC,EAAe6C,GAPjDzC,IAAAA,YACAoB,IAAAA,kCAkBK,CACLpB,YAAAA,EACA2C,cAZoBC,EACL,MAAf5C,GAAsBA,EACtBwB,IARAR,UADAC,UAEAC,cACAC,eACArB,uBAgBAsB,4BAAAA,MFXEyB,EAAuBxB,WAASC,OAAO,CAC3CC,iBGjBAC,EACA7B,EACAC,EACAC,EACAiD,SAUIJ,EAAiB/C,EAAeC,EAAeC,GAPjDG,IAAAA,YACAoB,IAAAA,4BACAH,IAAAA,QACAD,IAAAA,QACAE,IAAAA,YACAC,IAAAA,aACArB,IAAAA,4BAGK,CACLE,YAAAA,EACA2C,cAAeG,EACXA,EACE,CACE9D,EAAGgC,EACH/B,EAAGgC,EACHhI,MAAOiI,EACPhI,OAAQiI,GAEVrB,GAEF8C,EACiB,MAAf5C,GAAsBA,EACtBwB,EACAR,EACAC,EACAC,EACAC,EACArB,GAENsB,4BAAAA,IHnBFkB,aIlBAd,EACA7B,EACAC,EACAC,EACAiD,SAUIJ,EAAiB/C,EAAeC,EAAeC,GAPjDG,IAAAA,YACAoB,IAAAA,4BACAD,IAAAA,aACAD,IAAAA,YACAF,IAAAA,QACAC,IAAAA,QACAnB,IAAAA,4BAGK,CACLE,YAAAA,EACA2C,cAAeG,EACXA,EACE,CACE9D,EAAGgC,EACH/B,EAAGgC,EACHhI,MAAOiI,EACPhI,OAAQiI,GAEVrB,GAEF8C,EACiB,MAAf5C,GAAsBA,EACtBwB,EACAR,EACAC,EACAC,EACAC,EACArB,GAENsB,4BAAAA,MJhBE2B,EAA6BpE,EAAgB5F"}